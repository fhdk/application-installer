#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# MIT License
#
# Copyright (c) 2018 Fredes Computer Service
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import collections
import json
import glob
import os
import gi
import subprocess


gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib

VERSION = "0.6"
TITLE = "Manjaro Application Utility {}".format(VERSION)
SHARE_DIR = "/usr/share/app-utility/"
DEBUG = False


class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title=TITLE, border_width=6)
        GLib.set_prgname("app-utility")
        icon="system-software-install"
        pixbuf24 = Gtk.IconTheme.get_default().load_icon(icon, 24, 0)
        pixbuf32 = Gtk.IconTheme.get_default().load_icon(icon, 32, 0)
        pixbuf48 = Gtk.IconTheme.get_default().load_icon(icon, 48, 0)
        pixbuf64 = Gtk.IconTheme.get_default().load_icon(icon, 64, 0)
        pixbuf96 = Gtk.IconTheme.get_default().load_icon(icon, 96, 0)
        self.set_icon_list([pixbuf24, pixbuf32, pixbuf48, pixbuf64, pixbuf96])

        # set data
        self.pkg_selected = None
        self.pkg_installed = None
        self.pkg_list_install = []
        self.pkg_list_uninstall = []
        self.pkg_groups = []
        if DEBUG:
            self.pkg_data = self.get_app_data("./apps.json")
        else:
            self.pkg_data = self.get_app_data("{}/apps.json".format(SHARE_DIR))

        # setup main box
        self.set_default_size(700, 600)
        self.main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.add(self.main_box)

        # create title box
        self.title_box = Gtk.Box()
        self.title_image = Gtk.Image()
        self.title_image.set_size_request(100, 100)
        self.title_image.set_from_file("/usr/share/icons/manjaro/maia/96x96.png")
        self.title_label = Gtk.Label()
        self.title_label.set_markup("<big>Manjaro Application Maintenance</big>\n"
                                    "Select/Deselect apps you want to install/remove.\n"
                                    "Click <b>UPDATE SYSTEM</b> button when ready.")
        self.title_box.pack_start(self.title_image, expand=False, fill=False, padding=0)
        self.title_box.pack_start(self.title_label, expand=True, fill=True, padding=0)

        # pack title box to main box
        self.main_box.pack_start(self.title_box, expand=False, fill=False, padding=0)

        # setup grid
        self.grid = Gtk.Grid()
        self.grid.set_column_homogeneous(True)
        self.grid.set_row_homogeneous(True)
        self.main_box.add(self.grid)

        # setup list store model
        self.app_store = Gtk.TreeStore(str, str, str, str, bool, str, bool)
        for group in self.pkg_data:
            self.pkg_groups.append(group["name"])
            index = self.app_store.append(None,
                                          [group["name"],
                                           group["icon"],
                                           None, group["description"], None, None, None])
            for app in group["apps"]:
                status = self.app_installed(app["pkg"])
                tree_item = (None,
                             app["icon"],
                             app["name"],
                             app["description"],
                             status,
                             app["pkg"],
                             status)
                # add to the store
                self.app_store.append(index, tree_item)

        # create a treeview, using the filter, adding columns
        self.tree_view = Gtk.TreeView.new_with_model(self.app_store)
        self.tree_view.set_activate_on_single_click(True)

        # column model: icon
        renderer = Gtk.CellRendererPixbuf()
        column = Gtk.TreeViewColumn("", renderer, icon_name=1)
        self.tree_view.append_column(column)

        # column model: group name column
        renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("Group", renderer, text=0)
        self.tree_view.append_column(column)

        # column model: app name column
        renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("Application", renderer, text=2)
        self.tree_view.append_column(column)

        # column model: description column
        renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("Description", renderer, text=3)
        self.tree_view.append_column(column)

        # column model: install column
        toggle = Gtk.CellRendererToggle()
        toggle.connect("toggled", self.on_toggle)
        column = Gtk.TreeViewColumn("Installed", toggle, active=4)
        self.tree_view.append_column(column)

        self.button_box = Gtk.Box(spacing=10)
        self.install_pkg_button = Gtk.Button(label="UPDATE SYSTEM")
        self.install_pkg_button.connect("clicked", self.run_installer)
        self.close_button = Gtk.Button(label="Close")
        self.close_button.connect("clicked", Gtk.main_quit)
        self.button_box.pack_end(self.close_button, expand=False, fill=False, padding=10)
        self.button_box.pack_end(self.install_pkg_button, expand=False, fill=False, padding=10)

        # create a scrollable window
        self.app_window = Gtk.ScrolledWindow()
        self.app_window.set_vexpand(True)
        self.app_window.add(self.tree_view)

        self.grid.attach(self.app_window, 0, 0, 5, len(self.app_store))
        # pack button box
        self.main_box.pack_end(self.button_box, expand=False, fill=False, padding=10)
        self.show_all()

    def on_toggle(self, cell, path):
        # a group has no package attached and we don't install groups
        if self.app_store[path][5] is not None:
            self.app_store[path][4] = not self.app_store[path][4]
            self.pkg_selected = self.app_store[path][5]
            self.pkg_installed = self.app_store[path][6]

            if self.app_store[path][4] is False:
                if self.pkg_installed is True:
                    self.pkg_list_uninstall.append(self.pkg_selected)
                    if DEBUG:
                        print("to   uninstall: {}".format(self.pkg_selected))
                if self.pkg_selected in self.pkg_list_install:
                    self.pkg_list_install.remove(self.pkg_selected)
                    if DEBUG:
                        print("cancel install: {}".format(self.pkg_selected))
            else:
                # don't reinstall
                if self.pkg_installed is False:
                    if self.pkg_selected not in self.pkg_list_install:
                        self.pkg_list_install.append(self.pkg_selected)
                        if DEBUG:
                            print("to install    : {}".format(self.pkg_selected))
                if self.pkg_selected in self.pkg_list_uninstall:
                    self.pkg_list_uninstall.remove(self.pkg_selected)

            if DEBUG:
                print("pkg list install  : {}".format(self.pkg_list_install))
                print("pkg list uninstall: {}".format(self.pkg_list_uninstall))

    def run_installer(self, widget):
        self.run_selection(self.pkg_list_install, self.pkg_list_uninstall)

    @staticmethod
    def app_installed(package):
        if glob.glob("/var/lib/pacman/local/{}-[0-9]*".format(package)):
            return True
        return False

    @staticmethod
    def get_app_data(filename, dictionary=True):
        """Read json data from file"""
        result = list()
        try:
            if dictionary:
                with open(filename, "rb") as infile:
                    result = json.loads(
                        infile.read().decode("utf8"),
                        object_pairs_hook=collections.OrderedDict)
            else:
                with open(filename, "r") as infile:
                    result = json.load(infile)
        except OSError:
            pass
        return result

    @staticmethod
    def run_selection(pkg_list_install, pkg_list_uninstall):
        file_install = "/tmp/.install-packages.txt"
        file_uninstall = "/tmp/.remove-packages.txt"

        os.environ["APP_UTILITY"] = "PACKAGES"
        shell = False

        if pkg_list_install:
            if os.path.isfile("/usr/bin/pamac-installer"):
                subprocess.run(["pamac-installer"] + pkg_list_install)
            else:
                shell = True
                with open(file_install, "w") as outfile:
                    for p in pkg_list_install:
                        outfile.write("{} ".format(p))

        if pkg_list_uninstall:
            shell = True
            with open(file_uninstall, "w") as outfile:
                for p in pkg_list_uninstall:
                    outfile.write("{} ".format(p))

        if shell:
            if DEBUG:
                os.system('gksu-polkit ./app-install')
            else:
                os.system('gksu-polkit app-install')


win = MainWindow()
win.connect("delete-event", Gtk.main_quit)
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
